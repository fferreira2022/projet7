# Generated by Django 5.1.7 on 2025-03-17 12:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('SK_ID_CURR', models.IntegerField(primary_key=True, serialize=False)),
                ('EXT_SOURCE_1', models.FloatField()),
                ('EXT_SOURCE_2', models.FloatField()),
                ('EXT_SOURCE_3', models.FloatField()),
                ('DAYS_BIRTH', models.IntegerField()),
                ('DAYS_EMPLOYED', models.FloatField()),
                ('CODE_GENDER_M', models.BooleanField(default=False)),
                ('CREDIT_INCOME_PERCENT', models.FloatField()),
                ('ANNUITY_INCOME_PERCENT', models.FloatField()),
                ('CREDIT_TERM', models.FloatField()),
                ('AMT_CREDIT', models.FloatField()),
                ('AMT_ANNUITY', models.FloatField()),
                ('AMT_INCOME_TOTAL', models.FloatField()),
                ('DAYS_EMPLOYED_PERCENT', models.FloatField()),
                ('NAME_INCOME_TYPE_Businessman', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_Commercial_associate', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_Pensioner', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_State_servant', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_Student', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_Unemployed', models.BooleanField(default=False)),
                ('NAME_INCOME_TYPE_Working', models.BooleanField(default=False)),
                ('NAME_EDUCATION_TYPE_Academic_degree', models.BooleanField(default=False)),
                ('NAME_EDUCATION_TYPE_Higher_education', models.BooleanField(default=False)),
                ('NAME_EDUCATION_TYPE_Incomplete_higher', models.BooleanField(default=False)),
                ('NAME_EDUCATION_TYPE_Lower_secondary', models.BooleanField(default=False)),
                ('NAME_EDUCATION_TYPE_Secondary_secondary_special', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Register_form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=200)),
                ('password1', models.CharField(max_length=200)),
                ('password2', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
